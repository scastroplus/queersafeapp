# app.py

import streamlit as st
import google.generativeai as genai
import os # Embora n√£o usemos para carregar a key localmente neste fluxo, √© bom manter para refer√™ncia futura.
import re
from datetime import datetime

# --- Configura√ß√£o Inicial e Constantes ---
MODEL_ID = "gemini-1.5-flash-latest" 

# --- Fun√ß√µes do Notebook Adaptadas ---

def obter_relatorio_gemini_com_busca(destino, genero, api_key):
    """
    Usa um modelo Gemini com a ferramenta de busca para obter informa√ß√µes e gerar um relat√≥rio
    direto e conciso, com nuance baseada na pontua√ß√£o e adaptado ao g√™nero do usu√°rio,
    incluindo pontua√ß√£o, justificativa e se√ß√µes claras.
    """
    if not api_key: # Verifica se a api_key foi passada para a fun√ß√£o
        return "ERRO: A chave da API Gemini n√£o foi configurada. Verifique as configura√ß√µes no Streamlit Cloud Secrets."

    try:
        genai.configure(api_key=api_key) 
        
        st.info(f"-> Usando Modelo '{MODEL_ID}' para analisar '{destino}' (Com Instru√ß√£o de G√™nero)...")

        model = genai.GenerativeModel(model_name=MODEL_ID)

        prompt_gender_instruction = f"""
        A pessoa que solicitou este relat√≥rio se identifica com o seguinte g√™nero: "{genero}".
        Ao gerar o conte√∫do das se√ß√µes do relat√≥rio (Justificativa da Nota, Resumo Geral da Situa√ß√£o, Alertas de Seguran√ßa, Dicas Locais LGBT+), **adapte a linguagem para se adequar a este g√™nero**:
        - Se o g√™nero fornecido for "homem", use pronomes e concord√¢ncias gramaticais no masculino em portugu√™s (ex: "o viajante", "seguro para ele", "bem recebido").
        - Se o g√™nero fornecido for "mulher", use pronomes e concord√¢ncias gramaticais no feminino em portugu√™s (ex: "a viajante", "segura para ela", "bem recebida").
        - **Para qualquer outro g√™nero** (incluindo "transg√™nero", "N√£o-bin√°rio", "Ag√™nero", "G√™nero fluido", ou se o termo fornecido for amb√≠guo, plural ou n√£o listado), **utilize uma linguagem neutra em portugu√™s**. Priorize frases e estruturas que evitem concord√¢ncias de g√™nero expl√≠citas sempre que poss√≠vel (ex: "pessoa viajante", "seguro para essa pessoa", "bem recebide"). Se a linguagem neutra for dif√≠cil de manter em algumas frases, prefira o uso de termos mais gerais que n√£o impliquem g√™nero. Evite pronomes espec√≠ficos de g√™nero (ele/ela) e utilize alternativas neutras ou o nome da pessoa/g√™nero, se apropriado ao contexto.
        """

        prompt_text = f"""Voc√™ √© um agente de IA especializado em seguran√ßa de viagens para pessoas LGBT+.
Sua tarefa √© pesquisar na web (utilizando sua capacidade interna de acesso √† informa√ß√£o, se aplic√°vel, ou simulando com base no seu conhecimento atualizado)
informa√ß√µes sobre a situa√ß√£o atual (priorizando os **√∫ltimos 6-12 meses**) para pessoas LGBT+ em \"{destino}\".

Colete informa√ß√µes sobre os seguintes t√≥picos no destino \"{destino}\":
1. Leis e direitos LGBT+ RECENTES.
2. N√≠vel de seguran√ßa para pessoas LGBT+, incluindo relatos RECENTES (√∫ltimos 6-12 meses) de viol√™ncia, ass√©dio ou discrimina√ß√£o.
3. Exist√™ncia e atividades RECENTES (√∫ltimos 6-12 meses) de grupos extremistas (nazistas, neonazistas, fascistas, extrema direita, etc.) E se h√° relatos RECENTES (√∫ltimos 6-12 meses) de viol√™ncia ou amea√ßas desses grupos contra minorias, incluindo a comunidade LGBT+.
4. Aceita√ß√£o social e cultural RECENTE da comunidade LGBT+, incluindo atitudes gerais em rela√ß√£o a demonstra√ß√µes p√∫blicas de afeto.
5. Informa√ß√µes sobre a comunidade LGBT+ local, espa√ßos seguros (bares, clubes, ONGs, centros, eventos RECENTES).

Ap√≥s coletar e analisar as informa√ß√µes encontradas (especialmente focando na REC√äNCIA), gere um relat√≥rio **DIRETO E CONCISO**.

**Crucialmente:** Ao descrever desafios ou problemas (como rea√ß√µes a demonstra√ß√µes p√∫blicas de afeto), sempre **contextualize-os claramente dentro do panorama geral de seguran√ßa e aceita√ß√£o no destino**.
- Se a **Pontua√ß√£o de Seguran√ßa LGBT-Friendly** for alta (4.0 ou mais), minimize o foco em incidentes isolados ou desafios menores, enfatizando a seguran√ßa e aceita√ß√£o geral. Mencione os desafios apenas como ressalvas menores dentro do contexto positivo.
- Se a pontua√ß√£o for baixa, detalhe os riscos e desafios com mais √™nfase, explicando por que a nota √© baixa.

{prompt_gender_instruction}

O relat√≥rio DEVE conter as seguintes se√ß√µes, usando os t√≠tulos exatos em negrito e duas estrelas `**`, e usando as informa√ß√µes coletadas:

**Pontua√ß√£o de Seguran√ßa LGBT-Friendly:**
Avalie a seguran√ßa e o acolhimento em uma escala **num√©rica de 0.0 a 5.0**.
- 0.0: Extremamente perigoso, criminalizado com pena severa, alta hostilidade.
- 1.0: Muito arriscado, legalmente restritivo, forte discrimina√ß√£o.
- 2.0: Arriscado, poucas/nenhumas prote√ß√µes, discrimina√ß√£o social presente.
- 3.0: Algumas preocupa√ß√µes, seguro com precau√ß√µes; algumas prote√ß√µes/aceita√ß√£o.
- 4.0: Seguro e acolhedor na maior parte, boas prote√ß√µes legais/aceita√ß√£o.
- 5.0: Totalmente seguro, direitos plenos, sociedade acolhedora, cena vibrante.
**Escreva a pontua√ß√£o num√©rica clara e destacada logo abaixo do t√≠tulo \"Pontua√ß√£o de Seguran√ßa LGBT-Friendly:\", no formato: Pontua√ß√£o: X.X/5.**

**Justificativa da Nota:**
Explique CLARAMENTE por que voc√™ deu essa pontua√ß√£o, referenciando as informa√ß√µes encontradas (leis, seguran√ßa, grupos extremistas, aceita√ß√£o, comunidade), **contextualizando desafios dentro da nota geral conforme instru√≠do acima**. O impacto de leis que criminalizam atos LGBT+ (especialmente com pena severa) ou a presen√ßa de grupos extremistas com viol√™ncia deve ser refletido na nota e justificado explicitamente.

**Resumo Geral da Situa√ß√£o:**
Um panorama CONCISO da situa√ß√£o legal, de seguran√ßa e social no destino, **mantendo a nuance e pondera√ß√£o de acordo com a pontua√ß√£o geral e adaptando a linguagem ao g√™nero do usu√°rio**.

**Alertas de Seguran√ßa:**
Quaisquer cuidados espec√≠ficos a serem tomados ou riscos a serem observados com base nas informa√ß√µes, listados de forma clara, **adaptando a linguagem ao g√™nero do usu√°rio**.

**Dicas Locais LGBT+:**
Informa√ß√µes sobre bares, clubes, eventos, ONGs ou bairros conhecidos (se encontrados), listados de forma clara, **adaptando a linguagem ao g√™nero do usu√°rio**.

Foque na clareza, precis√£o e na REC√äNCIA das informa√ß√µes ao gerar o relat√≥rio e a pontua√ß√£o. Se a busca n√£o retornar informa√ß√µes recentes relevantes para um t√≥pico (especialmente sobre grupos extremistas e viol√™ncia), mencione a falta de dados recentes para esse ponto.

N√£o use emojis de arco-√≠ris no corpo principal do relat√≥rio gerado por voc√™; apenas forne√ßa a pontua√ß√£o num√©rica, a justificativa clara e o conte√∫do das se√ß√µes no formato solicitado. A convers√£o para emojis ser√° feita pelo meu c√≥digo Python.
"""
        
        st.info("Enviando prompt para o modelo Gemini... Isso pode levar alguns instantes. ‚è≥")
        response = model.generate_content(prompt_text)

        if response and hasattr(response, 'text') and response.text:
            return response.text
        else:
            error_message = "N√£o foi poss√≠vel gerar o relat√≥rio."
            if response and hasattr(response, 'candidates') and response.candidates:
                 if response.candidates[0].finish_reason:
                    error_message += f" Motivo da finaliza√ß√£o: {response.candidates[0].finish_reason}."
                 if response.candidates[0].safety_ratings:
                    error_message += f" Classifica√ß√µes de seguran√ßa: {response.candidates[0].safety_ratings}." # Ajustado para pegar de candidates[0]
            elif response:
                 error_message += f" O modelo retornou uma resposta inesperada ou vazia para '{destino}'. Resposta: {response}"
            else:
                 error_message += " Resposta do modelo foi None."
            return error_message

    except Exception as e:
        st.error(f"ERRO CR√çTICO ao interagir com a API Gemini: {e}")
        return f"ERRO: N√£o foi poss√≠vel gerar o relat√≥rio para '{destino}' devido a um problema na API Gemini: {e}"


def extrair_secao(texto, titulo_secao):
    """Extrai o texto de uma se√ß√£o espec√≠fica do relat√≥rio do modelo."""
    regex = rf'{re.escape(titulo_secao)}:?\s*(.*?)(?:(?=\n\*\*\w)|$)' # Regex da sua c√©lula 5
    match = re.search(regex, texto, re.DOTALL | re.IGNORECASE) 
    if match:
        return match.group(1).strip()
    return ""


def exibir_relatorio_streamlit(texto_relatorio_do_modelo, destino):
    """Exibe o relat√≥rio formatado no Streamlit."""
    
    st.subheader(f"üîç O que sabemos sobre {destino.capitalize()}")
    st.caption(f"Data da busca: {datetime.now().strftime('%Y-%m-%d')}")
    st.markdown("---")

    if not texto_relatorio_do_modelo or texto_relatorio_do_modelo.startswith("ERRO:"):
        st.error(f"N√£o foi poss√≠vel exibir o relat√≥rio: {texto_relatorio_do_modelo}")
        return

    # --- Extra√ß√£o da Pontua√ß√£o ---
    # Regex da sua c√©lula 5 para pontua√ß√£o
    pontuacao_str_match = re.search(r'Pontua(?:√ß√£o|cao)?:?\s*(\d(?:[.,]\d*)?)\s*/\s*5', texto_relatorio_do_modelo, re.IGNORECASE)
    pontuacao = None
    if pontuacao_str_match:
        try:
            pontuacao_val_str = pontuacao_str_match.group(1).replace(',', '.')
            pontuacao = float(pontuacao_val_str)
            pontuacao = max(0.0, min(pontuacao, 5.0)) 
        except ValueError:
            pontuacao = None
            st.warning("N√£o foi poss√≠vel converter a pontua√ß√£o para n√∫mero.")
    else:
        st.warning("Formato da pontua√ß√£o n√£o encontrado na resposta do modelo. O modelo retornou:")
        st.code(texto_relatorio_do_modelo) # Mostra o que o modelo retornou para debug

    # --- Emojis da Pontua√ß√£o (l√≥gica da C√©lula 5) ---
    emojis = "üö´"  
    if pontuacao is not None:
        if pontuacao > 0.0:
            pontuacao_arredondada = round(pontuacao * 2) / 2.0
            num_arco_iris_completos = int(pontuacao_arredondada)
            tem_meio_emoji = abs(pontuacao_arredondada - num_arco_iris_completos - 0.5) < 1e-9
            emojis = "üåà" * num_arco_iris_completos
            if tem_meio_emoji:
                # Usei o caractere ¬Ω que √© mais simples, ou pode ser "¬Ωüåà"
                emojis += "¬Ω" 
        else: 
            emojis = "üö´"
    
    if pontuacao is not None:
        st.markdown(f"### **Pontua√ß√£o LGBT+ Friendly: {pontuacao:.1f}/5 {emojis}**")
    else:
        st.markdown(f"### **Pontua√ß√£o LGBT+ Friendly: Indispon√≠vel {emojis}**")
    st.markdown("---")

    # --- Extra√ß√£o e Exibi√ß√£o das Se√ß√µes (t√≠tulos da C√©lula 5) ---
    # Ajustei os t√≠tulos na extra√ß√£o para corresponder EXATAMENTE ao que o prompt pede ao Gemini
    resumo_geral = extrair_secao(texto_relatorio_do_modelo, "**Resumo Geral da Situa√ß√£o:**")
    if resumo_geral:
        st.markdown("#### **Vis√£o geral**") # Cabe√ßalho de exibi√ß√£o
        st.markdown(resumo_geral)
        st.markdown("---")
    else:
        st.markdown("*(Resumo geral n√£o encontrado na resposta.)*")

    justificativa_nota = extrair_secao(texto_relatorio_do_modelo, "**Justificativa da Nota:**")
    if justificativa_nota:
        st.markdown("#### **Justificativa da nota**") # Cabe√ßalho de exibi√ß√£o
        st.markdown(justificativa_nota)
        st.markdown("---")
    else:
        st.markdown("*(Justificativa da nota n√£o encontrada na resposta.)*")

    alertas_seguranca = extrair_secao(texto_relatorio_do_modelo, "**Alertas de Seguran√ßa:**")
    if alertas_seguranca:
        st.markdown("#### **Alertas de Seguran√ßa**") # Cabe√ßalho de exibi√ß√£o
        st.markdown(alertas_seguranca)
        st.markdown("---")
    else:
        st.markdown("*(Alertas de seguran√ßa n√£o encontrados na resposta.)*")

    dicas_locais = extrair_secao(texto_relatorio_do_modelo, "**Dicas Locais LGBT+:**")
    if dicas_locais:
        st.markdown("#### **Dicas Locais LGBT+**") # Cabe√ßalho de exibi√ß√£o
        st.markdown(dicas_locais)
        st.markdown("---")
    else:
        st.markdown("*(Dicas locais LGBT+ n√£o encontradas na resposta.)*")
    
    st.markdown("---")
    st.caption("DISCLAIMER: Este relat√≥rio foi gerado por um agente de IA utilizando um modelo Gemini e buscas na web com base em publica√ß√µes dos √∫ltimos 6-12 meses. A precis√£o e completude dependem das informa√ß√µes encontradas pela ferramenta de busca e da capacidade do modelo em interpret√°-las e sintetiz√°-las. A pontua√ß√£o √© baseada na interpreta√ß√£o do modelo e das informa√ß√µes encontradas. A situa√ß√£o em um destino pode mudar rapidamente. Sempre fa√ßa sua pr√≥pria pesquisa adicional, consulte fontes oficiais de viagem e avalie os riscos com base nas suas circunst√¢ncias pessoais antes de viajar.")


# --- Interface Principal do Aplicativo Streamlit ---
def main():
    st.set_page_config(page_title="Radar Queer Seguro", page_icon="üè≥Ô∏è‚Äçüåà", layout="wide")
    
    # Carrega a API Key dos segredos do Streamlit
    # Esta √© a maneira correta para apps no Streamlit Cloud
    google_api_key = st.secrets.get("GOOGLE_API_KEY")

    if not google_api_key:
        st.error("üîë API Key do Google Gemini n√£o configurada!")
        st.markdown("Para que o aplicativo funcione, a `GOOGLE_API_KEY` precisa ser configurada nos segredos do Streamlit Cloud. V√° em 'Settings' (ou 'Manage app' > '...' > 'Settings') > 'Secrets' e adicione sua chave.")
        st.markdown("Exemplo do formato no `Secrets`:")
        st.code("GOOGLE_API_KEY = \"SUA_CHAVE_AQUI\"")
        return # Interrompe a execu√ß√£o se n√£o houver chave configurada nos Secrets

    # Interface do usu√°rio (da C√©lula 6)
    st.title("SEJA BEM VIADE! üè≥Ô∏è‚Äçüåà") # Mantendo sua sauda√ß√£o personalizada
    st.header("Este √© o RADAR QUEER SEGURO")
    st.subheader("Sua ferramenta de busca em IA e Google para encontrar locais seguros para viajar")
    st.markdown("---")

    genero = st.text_input("üó£Ô∏è Com qual g√™nero voc√™ se identifica?")
    destino = st.text_input("üåç Digite qual cidade, estado ou pa√≠s voc√™ quer conhecer:")

    if st.button("üîé Gerar Relat√≥rio de Seguran√ßa"):
        if genero and destino:
            with st.spinner(f"Analisando {destino}... Por favor, aguarde. Isso pode levar um momento..."):
                # Passa a google_api_key para a fun√ß√£o
                relatorio = obter_relatorio_gemini_com_busca(destino, genero, google_api_key) 
            
            if relatorio:
                exibir_relatorio_streamlit(relatorio, destino)
            else:
                st.error("Ocorreu um erro e n√£o foi poss√≠vel obter o relat√≥rio.")
        else:
            st.warning("Por favor, preencha seu g√™nero e o destino desejado.")

if __name__ == "__main__":
    main()